// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TaskForm: renders TaskForm 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Memo(TaskForm)
    onApply={[MockFunction]}
  >
    <ForwardRef(InternalForm)
      autoComplete="off"
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": undefined,
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      labelCol={
        Object {
          "span": 3,
        }
      }
      onFinish={[Function]}
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          autoComplete="off"
          className="ant-form ant-form-horizontal"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": undefined,
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          onFinish={[Function]}
          onFinishFailed={[Function]}
        >
          <form
            autoComplete="off"
            className="ant-form ant-form-horizontal"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <FormItem
              label="Task name"
              name="title"
              rules={
                Array [
                  Object {
                    "message": "Please, enter task title",
                    "required": true,
                  },
                ]
              }
            >
              <WrapperField
                label="Task name"
                messageVariables={
                  Object {
                    "label": "Task name",
                  }
                }
                name="title"
                onReset={[Function]}
                rules={
                  Array [
                    Object {
                      "message": "Please, enter task title",
                      "required": true,
                    },
                  ]
                }
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": undefined,
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_title"
                  label="Task name"
                  messageVariables={
                    Object {
                      "label": "Task name",
                    }
                  }
                  name={
                    Array [
                      "title",
                    ]
                  }
                  onReset={[Function]}
                  rules={
                    Array [
                      Object {
                        "message": "Please, enter task title",
                        "required": true,
                      },
                    ]
                  }
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="title"
                        label="Task name"
                        name="title"
                        prefixCls="ant-form"
                        required={true}
                        requiredMark={true}
                        rules={
                          Array [
                            Object {
                              "message": "Please, enter task title",
                              "required": true,
                            },
                          ]
                        }
                      >
                        <Col
                          className="ant-form-item-label"
                          span={3}
                        >
                          <div
                            className="ant-col ant-col-3 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className="ant-form-item-required"
                              htmlFor="title"
                              title="Task name"
                            >
                              Task name
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Task name"
                        name={
                          Array [
                            "title",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        rules={
                          Array [
                            Object {
                              "message": "Please, enter task title",
                              "required": true,
                            },
                          ]
                        }
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                        >
                          <div
                            className="ant-col ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={1}
                                >
                                  <Input
                                    allowClear={true}
                                    id="title"
                                    name="title"
                                    onChange={[Function]}
                                    type="text"
                                  >
                                    <ClearableLabeledInput
                                      allowClear={true}
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="title"
                                          name="title"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="title"
                                      inputType="input"
                                      name="title"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <span
                                        className="ant-input-affix-wrapper"
                                        onMouseUp={[Function]}
                                      >
                                        <input
                                          className="ant-input"
                                          id="title"
                                          name="title"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          style={null}
                                          type="text"
                                          value=""
                                        />
                                        <span
                                          className="ant-input-suffix"
                                        >
                                          <ForwardRef(CloseCircleFilled)
                                            className="ant-input-clear-icon-hidden ant-input-clear-icon"
                                            onClick={[Function]}
                                            onMouseDown={[Function]}
                                            role="button"
                                          >
                                            <AntdIcon
                                              className="ant-input-clear-icon-hidden ant-input-clear-icon"
                                              icon={
                                                Object {
                                                  "icon": Object {
                                                    "attrs": Object {
                                                      "focusable": "false",
                                                      "viewBox": "64 64 896 896",
                                                    },
                                                    "children": Array [
                                                      Object {
                                                        "attrs": Object {
                                                          "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                        },
                                                        "tag": "path",
                                                      },
                                                    ],
                                                    "tag": "svg",
                                                  },
                                                  "name": "close-circle",
                                                  "theme": "filled",
                                                }
                                              }
                                              onClick={[Function]}
                                              onMouseDown={[Function]}
                                              role="button"
                                            >
                                              <span
                                                aria-label="close-circle"
                                                className="anticon anticon-close-circle ant-input-clear-icon-hidden ant-input-clear-icon"
                                                onClick={[Function]}
                                                onMouseDown={[Function]}
                                                role="button"
                                                tabIndex={-1}
                                              >
                                                <IconReact
                                                  icon={
                                                    Object {
                                                      "icon": Object {
                                                        "attrs": Object {
                                                          "focusable": "false",
                                                          "viewBox": "64 64 896 896",
                                                        },
                                                        "children": Array [
                                                          Object {
                                                            "attrs": Object {
                                                              "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                            },
                                                            "tag": "path",
                                                          },
                                                        ],
                                                        "tag": "svg",
                                                      },
                                                      "name": "close-circle",
                                                      "theme": "filled",
                                                    }
                                                  }
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    data-icon="close-circle"
                                                    fill="currentColor"
                                                    focusable="false"
                                                    height="1em"
                                                    key="svg-close-circle"
                                                    viewBox="64 64 896 896"
                                                    width="1em"
                                                  >
                                                    <path
                                                      d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                      key="svg-close-circle-svg-0"
                                                    />
                                                  </svg>
                                                </IconReact>
                                              </span>
                                            </AntdIcon>
                                          </ForwardRef(CloseCircleFilled)>
                                        </span>
                                      </span>
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              wrapperCol={
                Object {
                  "offset": 3,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
              >
                <div
                  className="ant-row ant-form-item"
                  style={Object {}}
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    wrapperCol={
                      Object {
                        "offset": 3,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 3,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={3}
                    >
                      <div
                        className="ant-col ant-col-offset-3 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Button
                              htmlType="submit"
                              loading={false}
                              size="large"
                              type="primary"
                            >
                              <Wave>
                                <button
                                  className="ant-btn ant-btn-primary ant-btn-lg"
                                  onClick={[Function]}
                                  type="submit"
                                >
                                  <LoadingIcon
                                    existIcon={false}
                                    loading={false}
                                    prefixCls="ant-btn"
                                  >
                                    <CSSMotion
                                      motionName="ant-btn-loading-icon-motion"
                                      onAppearActive={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveStart={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </LoadingIcon>
                                  <span
                                    key=".0"
                                  >
                                    Apply task
                                  </span>
                                </button>
                              </Wave>
                            </Button>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </Memo(TaskForm)>
</Provider>
`;
